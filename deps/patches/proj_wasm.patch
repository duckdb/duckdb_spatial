--- project-config-version.cmake.in	2024-08-28 10:50:19
+++ project-config-version.cmake.in	2024-08-28 11:15:36
@@ -15,35 +15,7 @@
   math (EXPR MSVC_TOOLSET_MAJOR "${MSVC_TOOLSET_VERSION}/10")
 endif ()

-if (NOT PACKAGE_FIND_NAME STREQUAL "@PROJECT_VARIANT_NAME@")
-  # Check package name (in particular, because of the way cmake finds
-  # package config files, the capitalization could easily be "wrong").
-  # This is necessary to ensure that the automatically generated
-  # variables, e.g., <package>_FOUND, are consistently spelled.
-  set (REASON "package = @PROJECT_VARIANT_NAME@, NOT ${PACKAGE_FIND_NAME}")
-  set (PACKAGE_VERSION_UNSUITABLE TRUE)
-elseif (NOT (APPLE OR (NOT DEFINED CMAKE_SIZEOF_VOID_P) OR
-      CMAKE_SIZEOF_VOID_P EQUAL "@CMAKE_SIZEOF_VOID_P@"))
-  # Reject if there's a 32-bit/64-bit mismatch (not necessary with Apple
-  # since a multi-architecture library is built for that platform).
-  set (REASON "sizeof(*void) = @CMAKE_SIZEOF_VOID_P@")
-  set (PACKAGE_VERSION_UNSUITABLE TRUE)
-elseif (MSVC AND NOT (
-    # toolset version must be at least as great as @PROJECT_NAME@'s
-    MSVC_TOOLSET_VERSION GREATER_EQUAL @MSVC_TOOLSET_VERSION@
-    # and major versions must match
-    AND MSVC_TOOLSET_MAJOR EQUAL @MSVC_TOOLSET_MAJOR@ ))
-  # Reject if there's a mismatch in MSVC compiler versions
-  set (REASON "MSVC_TOOLSET_VERSION = @MSVC_TOOLSET_VERSION@")
-  set (PACKAGE_VERSION_UNSUITABLE TRUE)
-elseif (PACKAGE_FIND_VERSION)
-  if (PACKAGE_FIND_VERSION VERSION_EQUAL PACKAGE_VERSION)
-    set (PACKAGE_VERSION_EXACT TRUE)
-  elseif (PACKAGE_FIND_VERSION VERSION_LESS PACKAGE_VERSION
-    AND PACKAGE_FIND_VERSION_MAJOR EQUAL PACKAGE_VERSION_MAJOR)
-    set (PACKAGE_VERSION_COMPATIBLE TRUE)
-  endif ()
-endif ()
+set (PACKAGE_VERSION_COMPATIBLE TRUE)

 # If unsuitable, append the reason to the package version so that it's
 # visible to the user.
